<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on fanchen&#39;s blog</title>
    <link>https://frefsd.github.io/hugo-dev/tags/linux/</link>
    <description>Recent content in Linux on fanchen&#39;s blog</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 13 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://frefsd.github.io/hugo-dev/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker 快速入门指南</title>
      <link>https://frefsd.github.io/hugo-dev/posts/docker-development-workflow/</link>
      <pubDate>Sat, 13 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://frefsd.github.io/hugo-dev/posts/docker-development-workflow/</guid>
      <description>&lt;h1 id=&#34;docker-快速入门指南&#34;&gt;Docker 快速入门指南&lt;/h1&gt;&#xA;&lt;h2 id=&#34;先了解-docker&#34;&gt;先了解 Docker&lt;/h2&gt;&#xA;&lt;p&gt;Docker 是一个开源的&lt;strong&gt;容器化平台&lt;/strong&gt;，它允许你将应用程序及其依赖（如库、配置、环境变量）打包成一个轻量级、可移植的“容器”，并在任何支持 Docker 的环境中运行。&lt;/p&gt;&#xA;&lt;p&gt;传统部署中，我们常遇到：“在我机器上能跑！”的问题。&lt;br&gt;&#xA;而 Docker 通过&lt;strong&gt;隔离环境&lt;/strong&gt;，彻底解决了“开发环境 vs 生产环境不一致”的痛点。&lt;/p&gt;&#xA;&lt;h3 id=&#34;核心概念&#34;&gt;核心概念&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;镜像（Image）&lt;/strong&gt;：一个只读模板，包含运行应用所需的一切（如 &lt;code&gt;nginx:latest&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;容器（Container）&lt;/strong&gt;：镜像的运行实例，可以启动、停止、删除（如一个正在运行的 Nginx 服务）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;：一个文本文件，定义如何构建镜像（类似“配方”）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Docker Compose&lt;/strong&gt;：用于定义和运行多容器应用（如 Web + DB + Cache）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Registry&lt;/strong&gt;：镜像仓库，如 &lt;a href=&#34;https://hub.docker.com&#34;&gt;Docker Hub&lt;/a&gt;，可上传/下载镜像。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;为什么使用-docker&#34;&gt;为什么使用 Docker？&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;✅ &lt;strong&gt;环境一致性&lt;/strong&gt;：一次构建，到处运行&lt;/li&gt;&#xA;&lt;li&gt;✅ &lt;strong&gt;快速部署&lt;/strong&gt;：秒级启动容器&lt;/li&gt;&#xA;&lt;li&gt;✅ &lt;strong&gt;资源高效&lt;/strong&gt;：比虚拟机更轻量，共享宿主机内核&lt;/li&gt;&#xA;&lt;li&gt;✅ &lt;strong&gt;微服务友好&lt;/strong&gt;：每个服务一个容器，独立部署&lt;/li&gt;&#xA;&lt;li&gt;✅ &lt;strong&gt;CI/CD 集成&lt;/strong&gt;：与 Jenkins、GitHub Actions 等无缝协作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Docker 已成为现代云原生开发的&lt;strong&gt;基础设施标准&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;常用-docker-命令合集实战速查&#34;&gt;常用 Docker 命令合集（实战速查）&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 1. 镜像操作&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker images                    &lt;span style=&#34;color:#75715e&#34;&gt;# 查看本地所有镜像&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker pull nginx:latest         &lt;span style=&#34;color:#75715e&#34;&gt;# 从 Docker Hub 拉取镜像&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker build -t myapp:1.0 .      &lt;span style=&#34;color:#75715e&#34;&gt;# 使用当前目录 Dockerfile 构建镜像&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker rmi myapp:1.0             &lt;span style=&#34;color:#75715e&#34;&gt;# 删除指定镜像&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker rmi &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;docker images -q&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;# 删除所有本地镜像（慎用！）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 2. 容器操作&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d --name web -p 8080:80 nginx:latest    &lt;span style=&#34;color:#75715e&#34;&gt;# 启动容器（后台模式，端口映射）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it ubuntu:20.04 /bin/bash               &lt;span style=&#34;color:#75715e&#34;&gt;# 启动并进入容器（交互模式）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker stop web                    &lt;span style=&#34;color:#75715e&#34;&gt;# 停止容器&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker start web                   &lt;span style=&#34;color:#75715e&#34;&gt;# 启动已停止的容器&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker restart web                 &lt;span style=&#34;color:#75715e&#34;&gt;# 重启容器&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker rm web                      &lt;span style=&#34;color:#75715e&#34;&gt;# 删除容器&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker rm &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;docker ps -aq&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;# 删除所有容器（慎用！）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 3. 查看状态&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker ps                          &lt;span style=&#34;color:#75715e&#34;&gt;# 查看正在运行的容器&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker ps -a                       &lt;span style=&#34;color:#75715e&#34;&gt;# 查看所有容器（包括已停止）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker logs web                    &lt;span style=&#34;color:#75715e&#34;&gt;# 查看容器日志&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker logs -f web                 &lt;span style=&#34;color:#75715e&#34;&gt;# 实时跟踪日志（类似 tail -f）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker exec -it web /bin/bash      &lt;span style=&#34;color:#75715e&#34;&gt;# 进入正在运行的容器&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker inspect web                 &lt;span style=&#34;color:#75715e&#34;&gt;# 查看容器详细信息（IP、挂载等）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 4. 数据卷（持久化数据）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker volume create app-data      &lt;span style=&#34;color:#75715e&#34;&gt;# 创建命名卷&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d -v app-data:/app/data myapp:1.0   &lt;span style=&#34;color:#75715e&#34;&gt;# 挂载卷到容器&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker volume ls                   &lt;span style=&#34;color:#75715e&#34;&gt;# 列出所有卷&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker volume rm app-data          &lt;span style=&#34;color:#75715e&#34;&gt;# 删除卷&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 5. 网络&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker network create app-net      &lt;span style=&#34;color:#75715e&#34;&gt;# 创建自定义网络&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d --network app-net --name db mongo  &lt;span style=&#34;color:#75715e&#34;&gt;# 容器加入网络&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker network ls                  &lt;span style=&#34;color:#75715e&#34;&gt;# 查看网络&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker network inspect app-net     &lt;span style=&#34;color:#75715e&#34;&gt;# 查看网络详情&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 6. Docker Compose（多容器应用）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 创建 docker-compose.yml 后使用：&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker-compose up -d               &lt;span style=&#34;color:#75715e&#34;&gt;# 启动所有服务（后台）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker-compose down                &lt;span style=&#34;color:#75715e&#34;&gt;# 停止并删除所有服务&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker-compose logs -f             &lt;span style=&#34;color:#75715e&#34;&gt;# 查看所有服务日志&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker-compose build               &lt;span style=&#34;color:#75715e&#34;&gt;# 重新构建服务镜像&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 7. 清理资源（释放磁盘空间）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker system prune                &lt;span style=&#34;color:#75715e&#34;&gt;# 清理未使用的容器、网络、镜像、构建缓存&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker system prune -a             &lt;span style=&#34;color:#75715e&#34;&gt;# 清理所有未使用的资源（更彻底）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker volume prune                &lt;span style=&#34;color:#75715e&#34;&gt;# 删除未使用的卷&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
